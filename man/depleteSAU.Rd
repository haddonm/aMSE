% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamics.R
\name{depleteSAU}
\alias{depleteSAU}
\title{depleteSAU resets zoneD, approximately to an input depletion level}
\usage{
depleteSAU(zoneC, zoneD, glob, initdepl, product, len = 15)
}
\arguments{
\item{zoneC}{the constants components of the simulated zone}

\item{zoneD}{the dynamic components of the simulated zone}

\item{glob}{the general global variables}

\item{initdepl}{a vector of target depletion levels for each SAU. This
is found in zone1$condC, but could obviously be modified in each run.}

\item{product}{the production curve matrix from doproduction}

\item{len}{the number of intervals in the trial harvest rates}
}
\value{
a revised zoneD object
}
\description{
depleteSAU resets the depletion level of the whole
    zone and does this by searching for the harvest rate that
    leads to the mature biomass in each population is as close as
    possible to the desired depletion level. This means
    the individual populations will likely vary around the target
    depletion, so the depletion across the zone will only be
    approximately at the target depletion. The
    depletion is measured relative to the effective B0 as that
    takes account of any larval dispersal. This function uses the
    production curve array to search for harvest rates that bound
    the target depletion and then re-searches across those bounds
    using len intervals.
}
\examples{
\dontrun{
  data(zone1)
  glb <- zone1$globals
  data(constants)
  ans <- makezoneC(zone1,constants)
  zoneC <- ans$zoneC
  glb <- ans$glb  # now contains the move matrix
  ans <- makezone(glb,zoneC)
  zoneC <- ans$zoneC
  zoneD <- ans$zoneD
  ans2 <- modzoneC(zoneC,zoneD,glb)
  zoneC <- ans2$zoneC  # now has MSY and deplMSY
  product <- ans2$product
  zoneDD <- depleteSAU(zoneC,zoneD,glb,depl=rep(0.3,glb$nSAU),product)
  sum((zoneDD$matureB[1,]/sum(zoneDD$matureB[1,]))*zoneDD$deplsB[1,])
  mean(zoneDD$deplsB[1,])
}
}
