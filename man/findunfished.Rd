% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/defineZone.R
\name{findunfished}
\alias{findunfished}
\title{findunfished runs the region 3 x Nyrs to equilibrium}
\usage{
findunfished(regC, regD, glob, lowlim = 0, uplim = 0.4, inc = 0.005)
}
\arguments{
\item{regC}{the constants components of the simulated region}

\item{regD}{the dynamic components of the simulated region}

\item{glob}{the general global variables}

\item{lowlim}{the lower limit of harvest rate applied, default=0.0}

\item{uplim}{the upper limit of harvest rate applied, default=0.35}

\item{inc}{the harvest rate increment at each step, default=0.005}
}
\value{
a list containing the updated regionC and regionD
}
\description{
findunfished runs the region 3 x Nyrs so as to force
    the different populations to an equilibrium with respect to
    larval dispersal. If larval dispersal is greater than 0.0, then
    the standard methods for calculating the initial equilibrium
    conditions fail because the larval dispersal is proportional to
    each populations initial size. By running the dynamics 3x,
    findunfished can then adjust the values of effB0 and effExB0,
    it then sets the popq, the initial cpue is set to NA, and the
    initial depletions are reset to 1.0. Then it fills each
    population's MSY and MSYDepl values. If larval dispersal = 0.0,
    then the effeBO and effExB0 are = B0 and ExB0. If positive
    larval dispersal then the applicaiton of this function ensures
    the region starts at equilibrium. Beware, this is slow.
}
\examples{
\dontrun{  # takes too long to run
  data(region1)
  glb <- region1$globals
  data(constants)
  ans <- makeregionC(region1,constants)
  regionC <- ans$regionC
  ans <- makeregion(glb,regionC)
  regionC <- ans$regionC
  regionD <- ans$regionD
  ans2 <- findunfished(regionC,regionD,glb)
  str(ans2,max.level=2)
}
}
